@page "/"
@using System.Reflection.Metadata.Ecma335
@inject NavigationManager NavigationManager
@using Frontend.Classes
@using Frontend.Models

<PageTitle>Index</PageTitle>

<style>
    .card-title {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
        margin-bottom: 0;
        height: 1.2em;
        transition: transform 5s linear;
    }

    .card:hover .card-title {
        transform: translateY(calc(-1.2em * var(--lines)));
    }

    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .add-window {
        position: fixed;
        top: 25%;
        left: 25%;
        width: 50%;
        height: 50%;
        background-color: white;
        border-radius: 10px;
        padding: 20px 10px;
    }

    .button-container
    {
        position: absolute;
        left: 10px;
        right: 10px;
        bottom: 10px;
        display: flex;
        justify-content: space-between;
    }

    .input-container {
        margin-bottom: 10px;
    }

    label {
        font-weight: bold;
        margin-bottom: 5px;
    }

    input,
    textarea {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
    }

    #content {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
        height: 125px;
        resize: vertical;
    }
</style>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Including Bootstrap Icons in HTML</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css">
    <!-- Bootstrap Font Icon CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
</head>

<h3>Notizbücher</h3>

<div class="container">
    <div class="row">
        @foreach (var Entry in Entries)
        {
            <div class="col-md-2">
                <div class="card entry-card border-0">
                    <div class="card-body d-flex flex-column align-items-center">
                        <i class="bi bi-journal" style="font-size: 100px;"></i>
                        <h5 class="card-title" style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis; max-width: 100%;">
                            <span title="@Entry.Title">@Entry.Title</span>
                        </h5>
                        <div class="d-flex mt-auto">
                            <button class="btn btn-primary me-2" @onclick="() => EditEntry(Entry)">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                            <button class="btn btn-danger" @onclick="() => DeleteEntry(Entry)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="col-md-2 order-md-last">
            <div class="card entry-card border-0" @onclick="SetAddWindowVisibility">
                <div class="card-body d-flex flex-column align-items-center align-self-start">
                    <i class="bi bi-journal-plus" style="font-size: 100px;"></i>
                </div>
            </div>
        </div>
    </div>
</div>

@if (ShowAddWindow)
{
    <div class="overlay">
        <div class="add-window">
            <div class="input-container">
                <label for="title">Titel:</label>
                <input type="text" id="title" name="title" placeholder="Geben Sie den Titel ein" @bind="newEntry.Title">
            </div>

            <div class="input-container">
                <label for="content">Inhalt:</label>
                <textarea id="content" name="content" placeholder="Geben Sie den Inhalt ein" @bind="newEntry.Content"></textarea>
            </div>

            <div class="button-container">
                <button class="btn btn-secondary" @onclick="SetAddWindowVisibility">Schließen</button>
                <button class="btn btn-primary" @onclick="AddEntry">Erstellen</button>
            </div>
        </div>
    </div>
}

@if (ShowEditWindow)
{
    <div class="overlay">
        <div class="add-window">
            <div class="input-container">
                <label for="title">Titel:</label>
                <input type="text" id="title" name="title" placeholder="Geben Sie den Titel ein" @bind="selectedEntry.Title">
            </div>

            <div class="input-container">
                <label for="content">Inhalt:</label>
                <textarea id="content" name="content" placeholder="Geben Sie den Inhalt ein" @bind="selectedEntry.Content"></textarea>
            </div>

            <div class="button-container">
                <button class="btn btn-secondary" @onclick="CancelEdit">Schließen</button>
                <button class="btn btn-primary" @onclick="() => SaveEditedEntry(selectedEntry)">Speichern</button>
            </div>
        </div>
    </div>
}

@if (ShowEditWindow)
{
    <div class="overlay">
        <div class="add-window">
            <div class="input-container">
                <label for="title">Titel:</label>
                <input type="text" id="title" name="title" placeholder="Geben Sie den Titel ein" @bind="selectedEntry.Title">
            </div>

            <div class="input-container">
                <label for="content">Inhalt:</label>
                <textarea id="content" name="content" placeholder="Geben Sie den Inhalt ein" @bind="selectedEntry.Content"></textarea>
            </div>

            <div class="button-container">
                <button class="btn btn-secondary" @onclick="CancelEdit">Schließen</button>
                <button class="btn btn-primary" @onclick="() => SaveEditedEntry(selectedEntry)">Speichern</button>
            </div>
        </div>
    </div>
}

@code
{
    List<Entry> Entries = new();
    ApiHandle handler = new();
    Entry selectedEntry = new();
    Entry newEntry = new();

    bool ShowAddWindow = false;
    bool ShowEditWindow = false;
    bool ShowContentWindow = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GetEntryData();
    }

    private async void GetEntryData()
    {
        Entries = await handler.GetAllEntries();
        StateHasChanged();
    }

    async void AddEntry()
    {
        if (await handler.CreateEntry(newEntry))
        {
            GetEntryData();
        }
        SetAddWindowVisibility();
        newEntry = new();
    }

    void EditEntry(Entry entry)
    {
        selectedEntry = entry;
        SetEditWindowVisibility();
    }

    async void SaveEditedEntry(Entry entry)
    {
        if (await handler.UpdateEntry(entry.Id, entry))
        {
            GetEntryData();
        }
        SetEditWindowVisibility();
    }

    void CancelEdit()
    {
        GetEntryData();
        SetEditWindowVisibility();
    }

    async void DeleteEntry(Entry entry)
    {
        if (await handler.DeleteEntry(entry.Id))
        {
            GetEntryData();
        }
    }

    void SetAddWindowVisibility()
    {
        if (ShowAddWindow == false)
        {
            ShowAddWindow = true;
        }
        else
        {
            ShowAddWindow = false;
        }
    }

    void SetEditWindowVisibility()
    {
        if (ShowEditWindow == false)
        {
            ShowEditWindow = true;
        }
        else
        {
            ShowEditWindow = false;
        }
    }
}